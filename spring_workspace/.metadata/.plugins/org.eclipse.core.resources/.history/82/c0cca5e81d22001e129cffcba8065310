package com.care.ajaxBasic;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class AjaxService {
	@Autowired private AjaxMapper mapper;
	
	public String exists(String id) {
		if(id == null || id.isEmpty())
			return "아이디를 입력하세요.";
		
		Pattern pattern = Pattern.compile("^[a-z0-9]{1}[a-z0-9_-]{4,19}$");
		Matcher matcher = pattern.matcher(id);
		if(matcher.matches() == false)
			return "5~20자의 영문 소문자, 숫자와 특수기호(_),(-)만 사용 가능합니다.";
		
		String result = mapper.exists(id);
		if(result == null)
			return "사용 가능한 아이디 입니다.";
		return "사용 할 수 없는 아이디입니다. 다른 아이디를 입력해 주세요.";
	}
	/**DB 한번만 실행 또는 데이터가 변경되었을때 수행
	 * @param result */
	public String jsonInsert() {
		/*
		 * json 파일의 데이터를 읽어와서
		 * mapper.jsonInset 를 호출
		 * json_table데이블에 jsonExam2 파일 입력
		 * json_table테이블 title artist oruce varchar2구성
		 * */
		
		ClassPathResource cpr = new ClassPathResource("jsonExam2.json");
		List<AjaxVO> lists = null;
		try {
			File file = cpr.getFile();
			//Json array List 변환
			ObjectMapper mapper = new ObjectMapper();

			lists = mapper.readValue(file, new TypeReference<List<AjaxVO>>() {});
			
			System.out.println( (new TypeReference<List<AjaxVO>>() {}).getType() );
			//java.util.List<com.care.ajaxBasic.AjaxVO>
			//TypeReference를 사용하는 이유 : 제너릭을 사용하는 클래스의 자료형을 얻고 싶을 때
			
			
			} catch (IOException e) {
			
			e.printStackTrace();
			}
			mapper.jsonDelete(); //초기화
			for(AjaxVO ajax : lists) {
				int result = mapper.jsonInsert(ajax);
				if(result == 0)
					return "오류";
				
			}
				
		return "모든 데이터가 입력되었습니다";
	}
	public List<AjaxVO> ex6() {
		
		return mapper.ex6();
	}
	
	public List<AjaxVO> search(String title) {
		
			mapper.ex6();
			for(AjaxVO ajax : mapper.ex6()) {
				if(title.equals(ajax.getTitle())) {
					return mapper.serach();
				
				}
			
		
			}
			return null;


	}
}






